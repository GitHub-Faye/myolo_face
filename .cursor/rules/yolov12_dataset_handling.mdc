---
description: 
globs: 
alwaysApply: true
---
# YOLOv12数据集与数据加载器详解

## 数据集概述
YOLOv12框架支持多种数据集格式，针对姿态估计任务，主要使用COCO格式的关键点数据集。数据集配置和加载过程是训练和验证模型的基础环节。

## 数据集配置文件
- [COCO姿态数据集](mdc:ultralytics/cfg/datasets/coco-pose.yaml) - 位于`ultralytics/cfg/datasets/coco-pose.yaml`
- [COCO8姿态数据集](mdc:ultralytics/cfg/datasets/coco8-pose.yaml) - 小型测试版，位于`ultralytics/cfg/datasets/coco8-pose.yaml`
- 自定义数据集配置 - 可按YAML格式定义，指定路径、类别等信息

## 数据加载器组件

### 核心组件
- [build_dataloader](mdc:ultralytics/data/build.py) - 数据加载器构建函数，位于`ultralytics/data/build.py`
- [YOLODataset](mdc:ultralytics/data/dataset.py) - 数据集基类，位于`ultralytics/data/dataset.py`
- [LoadImages](mdc:ultralytics/data/loaders.py) - 图像加载器，位于`ultralytics/data/loaders.py`
- [LoadStreams](mdc:ultralytics/data/loaders.py) - 视频流加载器，位于`ultralytics/data/loaders.py`

### 数据转换与增强
- [LetterBox](mdc:ultralytics/data/augment.py) - 保持宽高比的尺寸调整，位于`ultralytics/data/augment.py`
- [MixUp](mdc:ultralytics/data/augment.py) - 混合增强，位于`ultralytics/data/augment.py`
- [Mosaic](mdc:ultralytics/data/augment.py) - 马赛克增强，位于`ultralytics/data/augment.py`
- [RandomPerspective](mdc:ultralytics/data/augment.py) - 随机透视变换，位于`ultralytics/data/augment.py`

## 数据处理流程

### 训练数据流程
1. 数据集初始化
   ```python
   # 在PoseTrainer中初始化数据集
   self.train_loader = self.build_dataloader(self.trainset, batch_size=self.batch_size, ...)
   ```

2. 批次加载与预处理
   - 图像尺寸调整（默认640×640）
   - 数据增强应用（Mosaic、MixUp等）
   - 标签转换（关键点坐标标准化）
   - 批次组织与设备转移

3. 训练中使用
   ```python
   # 在PoseTrainer.train_epoch中使用数据加载器
   for i, batch in enumerate(self.train_loader):
       # 获取图像和标签
       imgs, labels = batch["img"], batch["labels"]
       # 前向传播和训练逻辑
   ```

### 验证数据流程
1. 验证集加载
   ```python
   # 在PoseValidator中初始化验证数据集
   self.dataloader = self.build_dataloader(self.dataset, batch_size=self.batch_size, ...)
   ```

2. 验证预处理
   - 简化数据增强（保留尺寸调整）
   - 标签格式转换
   - 批次处理优化

3. 验证使用
   ```python
   # 在PoseValidator.val_step中使用
   for i, batch in enumerate(self.dataloader):
       # 执行验证预测
       preds = self.model(batch["img"])
       # 评估预测结果
   ```

## COCO姿态数据集格式
COCO格式的姿态数据集包含以下关键组件：
- images: 图像信息（id、宽度、高度、文件名）
- annotations: 目标注释（边界框、关键点坐标、可见性）
- categories: 类别信息

关键点标注格式：
```json
"keypoints": [x1, y1, v1, x2, y2, v2, ..., x17, y17, v17]
```
其中v表示可见性：0-不可见，1-被遮挡，2-可见

## 自定义数据集使用
1. 准备数据并转换为COCO格式
2. 创建数据集配置YAML文件
   ```yaml
   # 自定义姿态数据集示例
   path: path/to/dataset  # 数据集根目录
   train: train/images    # 训练图像相对路径
   val: val/images        # 验证图像相对路径
   test: test/images      # 测试图像相对路径
   
   # 类别信息
   names:
     0: person
   
   # 关键点信息
   kpt_shape: [17, 3]  # [关键点数量, 坐标维度]
   ```
3. 在训练命令中指定数据集配置
   ```bash
   yolo train model=yolov12-pose.pt data=custom-pose.yaml
   ```

## 数据加载器高级特性
- 多进程加载：通过`num_workers`参数控制
- 预取与缓存：优化内存使用和加载速度
- 多设备分布：支持分布式训练数据分割
- 自适应批大小：根据GPU内存自动调整

## 最佳实践
- 对于小数据集，增加数据增强强度
- 针对姿态任务，保持关键点可见性信息完整
- 验证集使用原始尺寸图像以获得更准确的评估
- 使用COCO8小数据集进行快速调试和测试
